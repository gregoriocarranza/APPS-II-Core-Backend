openapi: 3.1.0
info:
  title: Core API
  version: "0.1.2"
  description: >
    Borrador de especificación OpenAPI para el proyecto de desarrollo de apliaciónes II.
    Recursos: cursos, materias, notas, actas, docente-materias y disponibilidades.
    Endpoints: GET/POST/GET {id}/PUT/DELETE para cada recurso.
servers:
  - url: http://137.184.231.145:3030
    description: Local
tags:
  - name: Cursos
  - name: Materias
  - name: Notas
  - name: Actas
  - name: Docente-Materias
  - name: Disponibilidades
  - name: Inscripciones
  - name: Correlativas
  - name: Wallets
  - name: Users
  - name: Transactions
  - name: Notifications
components:
  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Página (1-based)
    PageSizeParam:
      name: page_size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: Tamaño de página (máx 100)
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object, additionalProperties: true }
            request_id: { type: string, format: uuid }
          required: [code, message]
      required: [error]
    PagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total: { type: integer }
        page: { type: integer }
        page_size: { type: integer }
      required: [items, total, page, page_size]
    Curso:
      type: object
      properties:
        id: { type: string, format: uuid }
        id_materia: { type: string, format: uuid, description: "FK Materia.id" }
        fecha_inicio: { type: string, format: date }
        fecha_fin: { type: string, format: date }
        tipo_examen:
          type: string
          enum: [parcial, recuperatorio, final]
        cantidad_maxima: { type: integer, minimum: 1 }
      required: [id, id_materia, fecha_inicio, fecha_fin, tipo_examen, cantidad_maxima]
    Materia:
      type: object
      properties:
        id: { type: string, format: uuid }
        nombre: { type: string, minLength: 1 }
      required: [id, nombre]
    Nota:
      type: object
      description: Registro de calificación/evaluación asociada a un curso.
      properties:
        id: { type: string, format: uuid }
        evaluacion: { type: string, description: "Nombre de la evaluación (ej: 1er parcial)" }
        id_curso: { type: string, format: uuid, description: "FK Curso.id" }
        tipo:
          type: string
          enum: [parcial, recuperatorio, final]
      required: [id, evaluacion, id_curso, tipo]
    Acta:
      type: object
      properties:
        id: { type: string, format: uuid }
        id_curso: { type: string, format: uuid, description: "FK Curso.id" }
        id_alumno: { type: string, format: uuid, description: "FK Alumno.id (no definido en este draft)" }
        estado:
          type: string
          description: Estado del acta
          enum: [abierta, cerrada, publicada, anulada]
      required: [id, id_curso, id_alumno, estado]
    DocenteMateria:
      type: object
      description: Relación N:N entre docentes y materias.
      properties:
        id: { type: string, format: uuid }
        id_docente: { type: string, format: uuid, description: "FK Docente.id (no definido en este draft)" }
        id_materia: { type: string, format: uuid, description: "FK Materia.id" }
      required: [id, id_docente, id_materia]
    Disponibilidad:
      type: object
      properties:
        id: { type: string, format: uuid }
        id_docente: { type: string, format: uuid, description: "FK Docente.id (no definido en este draft)" }
        turno: { type: string, description: "p. ej. mañana/tarde/noche" }
        dia: { type: string, description: "p. ej. lunes, martes..." }
      required: [id, id_docente, turno, dia]
    Inscripcion:
      type: object
      description: Registro de inscripción de un alumno a un curso.
      properties:
        uuid: { type: string, format: uuid }
        uuid_curso: { type: string, format: uuid, description: "FK curso.uuid" }
        uuid_alumno: { type: string, format: uuid, description: "FK users.uuid" }
        estado:
          type: string
          description: "Estado de la inscripción (ej.: pendiente, confirmada, anulada)"
        rol:
          type: string
          description: "Rol en el curso (ej.: alumno, titular, adjunto, ayudante)"
        created_at: { type: string, format: date-time }
      required: [uuid, uuid_curso, uuid_alumno]
    InscripcionCreate:
      type: object
      description: Payload para crear una inscripción.
      properties:
        uuid_curso: { type: string, format: uuid }
        uuid_alumno: { type: string, format: uuid }
        estado:
          type: string
          description: "Estado inicial (ej.: pendiente)"
        rol:
          type: string
          description: "Rol (por defecto 'alumno' si aplica)"
      required: [uuid_curso, uuid_alumno]
    Correlativa:
      type: object
      description: Relación de correlatividad entre materias.
      properties:
        uuid: { type: string, format: uuid }
        uuid_materia: { type: string, format: uuid, description: "Materia que requiere la correlativa" }
        uuid_materia_correlativa: { type: string, format: uuid, description: "Materia requerida (correlativa)" }
      required: [uuid, uuid_materia, uuid_materia_correlativa]
    CorrelativaCreate:
      type: object
      description: Payload para crear una correlativa entre dos materias.
      properties:
        uuid_materia: { type: string, format: uuid }
        uuid_materia_correlativa: { type: string, format: uuid }
      required: [uuid_materia, uuid_materia_correlativa]
    Wallet:
      type: object
      description: Billetera de un usuario.
      properties:
        uuid: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        currency:
          type: string
          description: Código ISO 4217 (3 letras)
          minLength: 3
          maxLength: 3
          example: "ARS"
        status:
          type: string
          enum: [active, blocked, closed]
        created_at: { type: string, format: date-time }
      required: [uuid, user_id, currency, status]
    User:
      type: object
      description: Usuario del sistema.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string }
        email:
          type: string
          format: email
        created_at: { type: string, format: date-time }
      required: [uuid, email]
    Transaction:
      type: object
      description: Movimiento asociado a una wallet.
      properties:
        uuid: { type: string, format: uuid }
        wallet_uuid: { type: string, format: uuid }
        type:
          type: string
          enum: [topup, payment, transfer, refund, payout]
        status:
          type: string
          enum: [pending, posted, failed, reversed]
        amount:
          type: integer
          description: Monto en la unidad menor de la moneda (p. ej. centavos)
        currency:
          type: string
          description: Código ISO 4217 (3 letras)
          minLength: 3
          maxLength: 3
          example: "ARS"
        description: { type: string }
        created_at: { type: string, format: date-time }
        posted_at: { type: string, format: date-time, nullable: true }
      required: [uuid, wallet_uuid, type, status, amount, currency]
    Notification:
      type: object
      description: Notificación dirigida a un usuario.
      properties:
        uuid: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        title: { type: string }
        message: { type: string }
        read:
          type: boolean
          description: Indicador de lectura
        created_at: { type: string, format: date-time }
        read_at: { type: string, format: date-time, nullable: true }
      required: [uuid, user_id, title, message, read]
    NotificationReadUpdate:
      type: object
      description: Actualización de estado de lectura de la notificación.
      properties:
        read: { type: boolean }
      required: [read]
paths:
  /cursos:
    get:
      tags: [Cursos]
      summary: Listar cursos
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: id_materia
          in: query
          schema: { type: string }
          description: Filtrar por Materia
        - name: tipo_examen
          in: query
          schema:
            type: string
            enum: [parcial, recuperatorio, final]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "c_123"
                    id_materia: "m_10"
                    fecha_inicio: "2025-03-01"
                    fecha_fin: "2025-07-01"
                    tipo_examen: "parcial"
                    cantidad_maxima: 30
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Cursos]
      summary: Crear curso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Curso'
            example:
              id: "c_123"
              id_materia: "m_10"
              fecha_inicio: "2025-03-01"
              fecha_fin: "2025-07-01"
              tipo_examen: "parcial"
              cantidad_maxima: 30
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Curso' }
        '400':
          description: Error de validación
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /cursos/{id}:
    get:
      tags: [Cursos]
      summary: Obtener curso
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Curso' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Cursos]
      summary: Reemplazar curso
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Curso' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Curso' }
        '400':
          description: Error de validación
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Cursos]
      summary: Eliminar curso
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /materias:
    get:
      tags: [Materias]
      summary: Listar materias
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: nombre
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "m_10"
                    nombre: "Ingeniería de Software"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Materias]
      summary: Crear materia
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Materia' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Materia' }
  /materias/{id}:
    get:
      tags: [Materias]
      summary: Obtener materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Materia' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Materias]
      summary: Reemplazar materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Materia' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Materia' }
    delete:
      tags: [Materias]
      summary: Eliminar materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
  /notas:
    get:
      tags: [Notas]
      summary: Listar notas
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: id_curso
          in: query
          schema: { type: string }
        - name: tipo
          in: query
          schema:
            type: string
            enum: [parcial, recuperatorio, final]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "n_1"
                    evaluacion: "1er parcial"
                    id_curso: "c_123"
                    tipo: "parcial"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Notas]
      summary: Crear nota
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Nota' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nota' }
  /notas/{id}:
    get:
      tags: [Notas]
      summary: Obtener nota
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nota' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Notas]
      summary: Reemplazar nota
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Nota' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nota' }
    delete:
      tags: [Notas]
      summary: Eliminar nota
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
  /actas:
    get:
      tags: [Actas]
      summary: Listar actas
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: id_curso
          in: query
          schema: { type: string }
        - name: id_alumno
          in: query
          schema: { type: string }
        - name: estado
          in: query
          schema:
            type: string
            enum: [abierta, cerrada, publicada, anulada]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "a_1"
                    id_curso: "c_123"
                    id_alumno: "al_55"
                    estado: "abierta"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Actas]
      summary: Crear acta
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Acta' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Acta' }
  /actas/{id}:
    get:
      tags: [Actas]
      summary: Obtener acta
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Acta' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Actas]
      summary: Reemplazar acta
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Acta' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Acta' }
    delete:
      tags: [Actas]
      summary: Eliminar acta
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
  /docente-materias:
    get:
      tags: [Docente-Materias]
      summary: Listar asignaciones docente-materia
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: id_docente
          in: query
          schema: { type: string }
        - name: id_materia
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "dm_1"
                    id_docente: "d_5"
                    id_materia: "m_10"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Docente-Materias]
      summary: Crear asignación docente-materia
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DocenteMateria' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DocenteMateria' }
  /docente-materias/{id}:
    get:
      tags: [Docente-Materias]
      summary: Obtener asignación docente-materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DocenteMateria' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Docente-Materias]
      summary: Reemplazar asignación docente-materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DocenteMateria' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DocenteMateria' }
    delete:
      tags: [Docente-Materias]
      summary: Eliminar asignación docente-materia
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
  /disponibilidades:
    get:
      tags: [Disponibilidades]
      summary: Listar disponibilidades de docentes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: id_docente
          in: query
          schema: { type: string }
        - name: turno
          in: query
          schema: { type: string }
        - name: dia
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - id: "disp_1"
                    id_docente: "d_5"
                    turno: "mañana"
                    dia: "lunes"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Disponibilidades]
      summary: Crear disponibilidad
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Disponibilidad' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Disponibilidad' }
  /disponibilidades/{id}:
    get:
      tags: [Disponibilidades]
      summary: Obtener disponibilidad
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Disponibilidad' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Disponibilidades]
      summary: Reemplazar disponibilidad
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Disponibilidad' }
      responses:
        '200':
          description: Actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Disponibilidad' }
    delete:
      tags: [Disponibilidades]
      summary: Eliminar disponibilidad
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Eliminado
  /inscripciones:
    get:
      tags: [Inscripciones]
      summary: Listar inscripciones
      description: Permite filtrar por curso o por usuario.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: uuid_curso
          in: query
          schema: { type: string, format: uuid }
          description: Filtrar inscripciones por curso
        - name: uuid_alumno
          in: query
          schema: { type: string, format: uuid }
          description: Filtrar inscripciones por usuario
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "i_1"
                    uuid_curso: "c_123"
                    uuid_alumno: "u_555"
                    estado: "pendiente"
                    rol: "alumno"
                    created_at: "2025-03-01T10:00:00Z"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Inscripciones]
      summary: Crear inscripción
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InscripcionCreate' }
            example:
              uuid_curso: "c_123"
              uuid_alumno: "u_555"
              estado: "pendiente"
              rol: "alumno"
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Inscripcion' }
        '400':
          description: Error de validación
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /inscripciones/{id}:
    delete:
      tags: [Inscripciones]
      summary: Eliminar inscripción
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Eliminado
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /correlativas:
    get:
      tags: [Correlativas]
      summary: Listar correlativas
      description: |
        - Para obtener las correlativas de una materia usar `uuid_materia`.
        - Para obtener a qué materias hace correlativa otra, usar `uuid_materia_correlativa`.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: uuid_materia
          in: query
          schema: { type: string, format: uuid }
          description: Materia que requiere la correlativa
        - name: uuid_materia_correlativa
          in: query
          schema: { type: string, format: uuid }
          description: Materia que es requerida como correlativa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "corr_1"
                    uuid_materia: "m_10"
                    uuid_materia_correlativa: "m_2"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Correlativas]
      summary: Crear correlativa
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CorrelativaCreate' }
            example:
              uuid_materia: "m_10"
              uuid_materia_correlativa: "m_2"
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Correlativa' }
        '400':
          description: Error de validación
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /correlativas/{id}:
    delete:
      tags: [Correlativas]
      summary: Eliminar correlativa
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Eliminado
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /wallets/by-user/{user_id}:
    get:
      tags: [Wallets]
      summary: Obtener una wallet por usuario
      description: |
        Devuelve una única wallet asociada al `user_id`.
        Si el usuario posee más de una wallet, especifique `currency` para desambiguar.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: currency
          in: query
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 3
          description: Código de moneda (ISO 4217), p. ej. ARS, USD.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Wallet' }
        '400':
          description: Parámetros inválidos o resultado ambiguo (múltiples wallets sin `currency`).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Wallet no encontrada para el usuario/moneda.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /users:
    get:
      tags: [Users]
      summary: Listar usuarios
      description: Filtra por nombre o email. Coincidencia exacta o parcial según implementación.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: name
          in: query
          required: false
          schema: { type: string }
          description: Filtro por nombre
        - name: email
          in: query
          required: false
          schema: { type: string, format: email }
          description: Filtro por email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "u_1"
                    name: "Ada Lovelace"
                    email: "ada@example.com"
                total: 1
                page: 1
                page_size: 25
  /users/{id}:
    get:
      tags: [Users]
      summary: Obtener usuario por UUID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /transactions:
    get:
      tags: [Transactions]
      summary: Listar transacciones
      description: |
        Permite filtrar por `wallet_uuid` y por rangos de fechas.
        Si solo envías `created_from` o `posted_from`, actúa como "fecha mayor o igual a".
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: wallet_uuid
          in: query
          required: false
          schema: { type: string, format: uuid }
          description: Filtrar por wallet
        - name: created_from
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: Desde (inclusive) por fecha de creación
        - name: created_to
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: Hasta (inclusive) por fecha de creación
        - name: posted_from
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: Desde (inclusive) por fecha de contabilización
        - name: posted_to
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: Hasta (inclusive) por fecha de contabilización
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "t_1"
                    wallet_uuid: "w_1"
                    type: "payment"
                    status: "posted"
                    amount: 12500
                    currency: "ARS"
                    description: "Compra en librería"
                    created_at: "2025-03-01T10:00:00Z"
                    posted_at: "2025-03-01T10:05:00Z"
                total: 1
                page: 1
                page_size: 25
  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Obtener transacción por UUID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transaction' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /wallets/{wallet_uuid}/transactions:
    get:
      tags: [Transactions]
      summary: Listar transacciones por wallet
      description: Endpount anidado equivalente a usar `GET /transactions?wallet_uuid=...`.
      parameters:
        - name: wallet_uuid
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: created_from
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: created_to
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: posted_from
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: posted_to
          in: query
          required: false
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
  /notifications/{id}:
    patch:
      tags: [Notifications]
      summary: Marcar notificación como leída/no leída
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotificationReadUpdate' }
            example:
              read: true
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Actualizada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Notification' }
        '400':
          description: Error de validación
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: No encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /users/{user_id}/notifications:
    get:
      tags: [Notifications]
      summary: Listar notificaciones por usuario
      description: Devuelve todas las notificaciones (leídas y no leídas) de un usuario.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "n_1"
                    user_id: "u_1"
                    title: "Recordatorio"
                    message: "Tienes una inscripción pendiente"
                    read: false
                    created_at: "2025-03-01T10:00:00Z"
                  - uuid: "n_2"
                    user_id: "u_1"
                    title: "Aviso"
                    message: "Inscripción confirmada"
                    read: true
                    created_at: "2025-03-02T09:00:00Z"
                total: 2
                page: 1
                page_size: 25
  /users/{user_id}/notifications/unread:
    get:
      tags: [Notifications]
      summary: Listar notificaciones no leídas por usuario
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResponse' }
              example:
                items:
                  - uuid: "n_1"
                    user_id: "u_1"
                    title: "Recordatorio"
                    message: "Tienes una inscripción pendiente"
                    read: false
                    created_at: "2025-03-01T10:00:00Z"
                total: 1
                page: 1
                page_size: 25
  /users/{user_id}/notifications/unread/count:
    get:
      tags: [Notifications]
      summary: Obtener cantidad de no leídas por usuario
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer, minimum: 0 }
                required: [count]
        
