openapi: 3.1.0
info:
  title: CampusConnect Core API
  version: "1.3.0"
  description: |
    The CampusConnect **Core API** exposes academic and institutional resources used by all modules
    (Student/Teacher Portal, Library, Cafeteria, Store, Analytics).

    **Auth model**: JWT Bearer with short-lived **access token** and rotating **refresh token**.
    All endpoints **require** authentication except `/auth/*` and `/.well-known/jwks.json`.

servers:
  - url: https://137.184.231.145:3030/api/v1
    description: Production (HTTPS)

security:
  - bearerAuth: []

tags:
  - name: auth
    description: Authentication endpoints (login, refresh, logout) and JWKS for public key discovery.
  - name: subjects
    description: Academic subjects offered by the institution. A subject can have prerequisites and multiple courses.
  - name: courses
    description: Concrete course instances linked to a subject and delimited by a date range.
  - name: teacher-subjects
    description: Assignments that link a teacher to a subject they can teach.
  - name: enrollments
    description: Users enrolled in courses (students and teaching roles). Used by Student/Teacher Portals.
  - name: subject-prerequisites
    description: Prerequisite graph among subjects used for enrollment validation.
  - name: users
    description: Users of the platform (students, teachers, staff). Read-only in Core.
  - name: wallets
    description: User wallets for campus services (library fines, cafeteria/store purchases).
  - name: transactions
    description: Wallet transactions (topups, payments, refunds, transfers, payouts).
  - name: notifications
    description: User-targeted notifications; supports read/unread operations and listing by user.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    CacheControlNoStore:
      description: "Set to `no-store` to prevent caching of auth responses."
      schema: { type: string, example: "no-store" }
    PragmaNoCache:
      description: "Set to `no-cache` for legacy cache prevention."
      schema: { type: string, example: "no-cache" }
    WWWAuthenticate:
      description: "Authentication challenge details for 401 responses."
      schema: { type: string, example: "Bearer error=\"invalid_token\", error_description=\"The token is expired\"" }
  parameters:
    PageParam:
      name: page
      in: query
      description: 1-based page index.
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      name: pageSize
      in: query
      description: Page size (max 100).
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
    SortParam:
      name: sort
      in: query
      description: Comma-separated fields. Prefix with `-` for descending (e.g., `name,-createdAt`).
      schema: { type: string }
    QParam:
      name: q
      in: query
      description: Free-text search (implementation-specific).
      schema: { type: string }
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string, description: Stable internal error code }
            message: { type: string, description: Human-readable message }
            details: { type: object, additionalProperties: true, description: Structured validation context }
            requestId: { type: string, format: uuid, description: Correlates server logs }
          required: [code, message]
      required: [error]
    PagedResponse:
      type: object
      properties:
        items: { type: array, items: { type: object } }
        total: { type: integer }
        page: { type: integer }
        pageSize: { type: integer }
      required: [items, total, page, pageSize]

    # ===== Auth =====
    AuthLoginRequest:
      type: object
      required: [user, password]
      properties:
        user: { type: string, description: "Username or email." }
        password: { type: string, description: "User password." }
    AuthTokens:
      type: object
      required: [tokenType, jwt, refreshToken, expiresAt]
      properties:
        tokenType: { type: string, enum: [Bearer], description: "Always 'Bearer'." }
        jwt: { type: string, description: "Access token (JWT, RS256)." }
        refreshToken: { type: string, description: "Opaque or JWT refresh token (rotating)." }
        expiresAt: { type: integer, description: "JWT expiration (Unix seconds)." }
        refreshExpiresAt: { type: integer, description: "Refresh token expiration (Unix seconds)." }
    AuthRefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string, description: "Refresh token to rotate and obtain a new access token." }
    AuthLogoutRequest:
      type: object
      properties:
        refreshToken: { type: string, description: "Refresh token to revoke. If omitted with all=true, revokes all sessions for current subject." }
        all: { type: boolean, default: false, description: "If true, revokes all active refresh tokens for the authenticated user." }
    JWKS:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            additionalProperties: true
      description: "JSON Web Key Set as per RFC 7517."

    # ===== Domain =====
    Subject:
      type: object
      description: Canonical subject record.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string, minLength: 1, description: Unique subject name }
      required: [uuid, name]
    Course:
      type: object
      description: A schedulable course offering linked to a subject.
      properties:
        uuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid, description: References `Subject.uuid` }
        exam: { type: string, nullable: true, description: Exam label }
        commission: { type: string, description: Commission }
        modality: { type: string, description: Modality }
        campus: { type: string, description: Campus/Site }
        classroom: { type: string, description: Classroom }
        period: { type: string, description: Period }
        schedule: { type: string, description: Schedule }
        maxCount: { type: integer, minimum: 1, description: Maximum count }
        minCount: { type: integer, minimum: 1, description: Minimum count }
        since: { type: integer, description: Start time (Unix seconds) }
        until: { type: integer, description: End time (Unix seconds) }
        createdAt: { type: integer, description: Creation time (Unix seconds) }
      required:
        - uuid
        - subjectUuid
        - since
        - until
    TeacherSubject:
      type: object
      description: N:N relation binding a teacher to a subject.
      properties:
        uuid: { type: string, format: uuid }
        teacherUuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid }
      required: [uuid, teacherUuid, subjectUuid]
    Enrollment:
      type: object
      description: Enrollment of a user into a course; supports student and teaching roles.
      properties:
        uuid: { type: string, format: uuid }
        courseUuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        status: { type: string, description: "E.g., pending, confirmed, cancelled" }
        role: { type: string, description: "E.g., student, head, assistant" }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, courseUuid, userUuid]
    EnrollmentCreate:
      type: object
      description: Payload to create an enrollment.
      properties:
        courseUuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        status: { type: string }
        role: { type: string }
      required: [courseUuid, userUuid]
    SubjectPrerequisite:
      type: object
      description: Directed prerequisite edge in the subject graph.
      properties:
        uuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid, description: Subject that requires the prerequisite }
        prerequisiteSubjectUuid: { type: string, format: uuid, description: Required subject }
      required: [uuid, subjectUuid, prerequisiteSubjectUuid]
    SubjectPrerequisiteCreate:
      type: object
      description: Payload to create a new prerequisite relation.
      properties:
        subjectUuid: { type: string, format: uuid }
        prerequisiteSubjectUuid: { type: string, format: uuid }
      required: [subjectUuid, prerequisiteSubjectUuid]
    User:
      type: object
      description: Read-only user projection.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, email]
    Wallet:
      type: object
      description: Wallet assigned to a user.
      properties:
        uuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        currency: { type: string, minLength: 3, maxLength: 3, description: ISO-4217 code }
        status: { type: string, enum: [active, blocked, closed] }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, userUuid, currency, status]
    Transaction:
      type: object
      description: Monetary operation affecting a wallet's balance.
      properties:
        uuid: { type: string, format: uuid }
        walletUuid: { type: string, format: uuid }
        type: { type: string, enum: [topup, payment, transfer, refund, payout] }
        status: { type: string, enum: [pending, posted, failed, reversed] }
        amount: { type: integer, description: Amount in minor units }
        currency: { type: string, minLength: 3, maxLength: 3, description: ISO-4217 }
        description: { type: string }
        createdAt: { type: integer, description: Unix seconds }
        postedAt: { type: integer, nullable: true, description: Unix seconds }
      required: [uuid, walletUuid, type, status, amount, currency]
    Notification:
      type: object
      description: User-targeted message stored server-side.
      properties:
        uuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        title: { type: string }
        message: { type: string }
        read: { type: boolean }
        createdAt: { type: integer, description: Unix seconds }
        readAt: { type: integer, nullable: true, description: Unix seconds }
      required: [uuid, userUuid, title, message, read]
    NotificationReadUpdate:
      type: object
      description: Partial update to toggle read status.
      properties:
        read: { type: boolean }
      required: [read]
  responses:
    BadRequest: { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate: { $ref: '#/components/headers/WWWAuthenticate' }
      content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
    Forbidden: { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    NotFound: { description: Not Found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Conflict: { description: Conflict, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    UnprocessableEntity: { description: Unprocessable Entity, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    TooManyRequests: { description: Too Many Requests, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    InternalServerError: { description: Internal Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    ServiceUnavailable: { description: Service Unavailable, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

paths:
  # ===================== AUTH =====================
  /auth/login:
    post:
      tags: [auth]
      summary: Login with user credentials
      description: |
        Authenticates a user and returns a **JWT access token** plus a **refresh token**.
        Access tokens are **short-lived** (e.g., 15 minutes). Refresh tokens are **rotated** on every use.
        Responses include cache-prevention headers.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginRequest' }
            example: { user: "alice@example.com", password: "s3cretPass" }
      responses:
        '200':
          description: Authenticated
          headers:
            Cache-Control: { $ref: '#/components/headers/CacheControlNoStore' }
            Pragma: { $ref: '#/components/headers/PragmaNoCache' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
              example:
                tokenType: Bearer
                jwt: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken: "Af63..."
                expiresAt: 1750001111
                refreshExpiresAt: 1752593111
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /auth/refresh:
    post:
      tags: [auth]
      summary: Rotate refresh token and issue a new access token
      description: |
        Exchanges a valid **refresh token** for a new pair `{ jwt, refreshToken }`.
        Implements **rotation** and detection of token reuse. On reuse, server **revokes** the entire session chain.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRefreshRequest' }
            example: { refreshToken: "Af63..." }
      responses:
        '200':
          description: New tokens issued
          headers:
            Cache-Control: { $ref: '#/components/headers/CacheControlNoStore' }
            Pragma: { $ref: '#/components/headers/PragmaNoCache' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /auth/logout:
    post:
      tags: [auth]
      summary: Revoke refresh token(s)
      description: |
        Revokes the provided `refreshToken`. If `all=true`, revokes **all** active refresh tokens of the authenticated user.
        Use this to terminate sessions on logout or security events.
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLogoutRequest' }
            example: { refreshToken: "Af63...", all: false }
      responses:
        '204': { description: Revoked }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /.well-known/jwks.json:
    get:
      tags: [auth]
      summary: JWKS (public keys for JWT verification)
      description: Returns the JSON Web Key Set (public keys) to validate JWT signatures (RS256).
      security: []
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/JWKS' } } } }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== SUBJECTS =====================
  /subjects:
    get:
      tags: [subjects]
      summary: List subjects
      description: |
        Returns a paged list of subjects. Supports optional text search and exact name filter.
        Typical consumers: Student/Teacher Portals and Analytics.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QParam'
        - name: name
          in: query
          schema: { type: string }
          description: Exact name filter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: b7e6c2e2-8f3a-4c1a-9e2a-123456789abc
                    name: Mathematics
                  - uuid: a1b2c3d4-5e6f-7a8b-9c0d-abcdef123456
                    name: Physics
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [subjects]
      summary: Create subject
      description: Creates a new subject. The `name` must be unique.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Subject' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /subjects/{uuid}:
    get:
      tags: [subjects]
      summary: Get subject
      description: Retrieves a subject by UUID.
      parameters:
        - name: uuid
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [subjects]
      summary: Replace subject
      description: Replaces a subject entirely. Use when updating all fields.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [subjects]
      summary: Delete subject
      description: Deletes the subject by UUID. Fails with `409` if in use by courses.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== COURSES =====================
  /courses:
    get:
      tags: [courses]
      summary: List courses
      description: |
        Returns a paged list of courses. Filter by any course property.
        Typical consumers: Student Portal, Teacher Portal, and Scheduling.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QParam'
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid }, description: Subject UUID }
        - { name: exam, in: query, schema: { type: string }, description: Exam label }
        - { name: commission, in: query, schema: { type: string }, description: Commission }
        - { name: modality, in: query, schema: { type: string }, description: Modality }
        - { name: campus, in: query, schema: { type: string }, description: Campus/Site }
        - { name: classroom, in: query, schema: { type: string }, description: Classroom }
        - { name: period, in: query, schema: { type: string }, description: Period }
        - { name: schedule, in: query, schema: { type: string }, description: Schedule }
        - { name: maxCount, in: query, schema: { type: integer }, description: Maximum count }
        - { name: minCount, in: query, schema: { type: integer }, description: Minimum count }
        - { name: sinceGte, in: query, schema: { type: integer }, description: since >= (Unix seconds) }
        - { name: untilLte, in: query, schema: { type: integer }, description: until <= (Unix seconds) }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 11111111-2222-3333-4444-555555555555
                    subjectUuid: b7e6c2e2-8f3a-4c1a-9e2a-123456789abc
                    exam: "Midterm"
                    commission: "A"
                    modality: "In-person"
                    campus: "Main Campus"
                    classroom: "101"
                    period: "2025-Q1"
                    schedule: "Mon 8:00-10:00"
                    maxCount: 35
                    minCount: 10
                    since: 1750000000
                    until: 1750003600
                    createdAt: 1749999999
                  - uuid: 66666666-7777-8888-9999-000000000000
                    subjectUuid: a1b2c3d4-5e6f-7a8b-9c0d-abcdef123456
                    exam: "Final"
                    commission: "B"
                    modality: "Online"
                    campus: "North Campus"
                    classroom: "Virtual Room"
                    period: "2025-Q2"
                    schedule: "Wed 14:00-16:00"
                    maxCount: 35
                    minCount: 10
                    since: 1750100000
                    until: 1750103600
                    createdAt: 1750099999
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [courses]
      summary: Create course
      description: Creates a new course linked to a subject.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /courses/{uuid}:
    get:
      tags: [courses]
      summary: Get course
      description: Retrieves a course by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [courses]
      summary: Replace course
      description: Replaces an existing course. Use when updating all fields.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [courses]
      summary: Delete course
      description: Deletes a course by UUID. Enrollment constraints may cause `409`.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== TEACHER-SUBJECTS =====================
  /teacher-subjects:
    get:
      tags: [teacher-subjects]
      summary: List teacher-subject assignments
      description: Returns assignments linking teachers and subjects.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - { name: teacherUuid, in: query, schema: { type: string, format: uuid } }
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 123e4567-e89b-12d3-a456-426614174000
                    teacherUuid: 987e6543-e21b-12d3-a456-426614174999
                    subjectUuid: b7e6c2e2-8f3a-4c1a-9e2a-123456789abc
                  - uuid: 223e4567-e89b-12d3-a456-426614174001
                    teacherUuid: 987e6543-e21b-12d3-a456-426614174999
                    subjectUuid: a1b2c3d4-5e6f-7a8b-9c0d-abcdef123456
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [teacher-subjects]
      summary: Create teacher-subject assignment
      description: Creates a new assignment for a teacher and a subject.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /teacher-subjects/{uuid}:
    get:
      tags: [teacher-subjects]
      summary: Get teacher-subject assignment
      description: Retrieves a teacher-subject assignment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [teacher-subjects]
      summary: Replace teacher-subject assignment
      description: Replaces an existing assignment.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [teacher-subjects]
      summary: Delete teacher-subject assignment
      description: Deletes an assignment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== ENROLLMENTS & PREREQUISITES =====================
  /enrollments:
    get:
      tags: [enrollments]
      summary: List enrollments
      description: Filter by `courseUuid` or `userUuid`.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: courseUuid, in: query, schema: { type: string, format: uuid } }
        - { name: userUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 333e4567-e89b-12d3-a456-426614174002
                    courseUuid: 11111111-2222-3333-4444-555555555555
                    userUuid: 555e4444-e89b-12d3-a456-426614174888
                    status: confirmed
                    role: student
                    createdAt: 1750001111
                  - uuid: 444e4567-e89b-12d3-a456-426614174003
                    courseUuid: 66666666-7777-8888-9999-000000000000
                    userUuid: 555e4444-e89b-12d3-a456-426614174888
                    status: pending
                    role: assistant
                    createdAt: 1750002222
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [enrollments]
      summary: Create enrollment
      description: Creates a new enrollment for a user and course.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/EnrollmentCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Enrollment' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /enrollments/{uuid}:
    delete:
      tags: [enrollments]
      summary: Delete enrollment
      description: Cancels an enrollment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /subject-prerequisites:
    get:
      tags: [subject-prerequisites]
      summary: List subject prerequisites
      description: Filter by `subjectUuid` (prerequisites of a subject) or `prerequisiteSubjectUuid` (subjects that require another).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid } }
        - { name: prerequisiteSubjectUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 555e4567-e89b-12d3-a456-426614174004
                    subjectUuid: b7e6c2e2-8f3a-4c1a-9e2a-123456789abc
                    prerequisiteSubjectUuid: a1b2c3d4-5e6f-7a8b-9c0d-abcdef123456
                  - uuid: 666e4567-e89b-12d3-a456-426614174005
                    subjectUuid: a1b2c3d4-5e6f-7a8b-9c0d-abcdef123456
                    prerequisiteSubjectUuid: b7e6c2e2-8f3a-4c1a-9e2a-123456789abc
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [subject-prerequisites]
      summary: Create subject prerequisite
      description: Creates a prerequisite relation between two subjects.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SubjectPrerequisiteCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/SubjectPrerequisite' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /subject-prerequisites/{uuid}:
    delete:
      tags: [subject-prerequisites]
      summary: Delete subject prerequisite
      description: Deletes a prerequisite relation by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== USERS & WALLETS =====================
  /users:
    get:
      tags: [users]
      summary: List users
      description: Filter by `name` and/or `email` (exact or partial per implementation).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: name, in: query, schema: { type: string } }
        - { name: email, in: query, schema: { type: string, format: email } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 555e4444-e89b-12d3-a456-426614174888
                    name: Alice Smith
                    email: alice.smith@example.com
                    createdAt: 1750001111
                  - uuid: 666e4444-e89b-12d3-a456-426614174889
                    name: Bob Jones
                    email: bob.jones@example.com
                    createdAt: 1750002222
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{uuid}:
    get:
      tags: [users]
      summary: Get user by UUID
      description: Retrieves a user by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{userUuid}/wallets:
    get:
      tags: [wallets]
      summary: Get wallet(s) by user
      description: Returns one or more wallets owned by the given user. Provide `currency` to narrow down if multiple.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - { name: currency, in: query, schema: { type: string, minLength: 3, maxLength: 3 } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - { $ref: '#/components/schemas/Wallet' }
                  - { type: array, items: { $ref: '#/components/schemas/Wallet' } }
              example:
                - uuid: 987e6543-e21b-12d3-a456-426614174999
                  userUuid: 555e4444-e89b-12d3-a456-426614174888
                  currency: USD
                  status: active
                  createdAt: 1750001111
                - uuid: 888e6543-e21b-12d3-a456-426614174998
                  userUuid: 555e4444-e89b-12d3-a456-426614174888
                  currency: EUR
                  status: blocked
                  createdAt: 1750002222
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== TRANSACTIONS =====================
  /transactions:
    get:
      tags: [transactions]
      summary: List transactions
      description: Filter by `walletUuid` and creation/posting time ranges (Unix seconds).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: walletUuid, in: query, schema: { type: string, format: uuid } }
        - { name: createdFrom, in: query, schema: { type: integer } }
        - { name: createdTo, in: query, schema: { type: integer } }
        - { name: postedFrom, in: query, schema: { type: integer } }
        - { name: postedTo, in: query, schema: { type: integer } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 123e4567-e89b-12d3-a456-426614174010
                    walletUuid: 987e6543-e21b-12d3-a456-426614174999
                    type: topup
                    status: posted
                    amount: 5000
                    currency: USD
                    description: "Top-up via credit card"
                    createdAt: 1750001111
                    postedAt: 1750001122
                  - uuid: 223e4567-e89b-12d3-a456-426614174011
                    walletUuid: 987e6543-e21b-12d3-a456-426614174999
                    type: payment
                    status: posted
                    amount: 1500
                    currency: USD
                    description: "Cafeteria purchase"
                    createdAt: 1750001133
                    postedAt: 1750001144
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /transactions/{uuid}:
    get:
      tags: [transactions]
      summary: Get transaction by UUID
      description: Retrieves a wallet transaction by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Transaction' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /wallets/{walletUuid}/transactions:
    get:
      tags: [transactions]
      summary: List transactions by wallet
      description: Equivalent to `GET /transactions?walletUuid=...`.
      parameters:
        - { name: walletUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: createdFrom, in: query, schema: { type: integer } }
        - { name: createdTo, in: query, schema: { type: integer } }
        - { name: postedFrom, in: query, schema: { type: integer } }
        - { name: postedTo, in: query, schema: { type: integer } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
              example:
                items:
                  - uuid: 123e4567-e89b-12d3-a456-426614174010
                    walletUuid: 987e6543-e21b-12d3-a456-426614174999
                    type: topup
                    status: posted
                    amount: 5000
                    currency: USD
                    description: "Top-up via credit card"
                    createdAt: 1750001111
                    postedAt: 1750001122
                  - uuid: 223e4567-e89b-12d3-a456-426614174011
                    walletUuid: 987e6543-e21b-12d3-a456-426614174999
                    type: payment
                    status: posted
                    amount: 1500
                    currency: USD
                    description: "Cafeteria purchase"
                    createdAt: 1750001133
                    postedAt: 1750001144
                total: 2
                page: 1
                pageSize: 25
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  # ===================== NOTIFICATIONS =====================
  /notifications/{uuid}:
    get:
      tags: [notifications]
      summary: Get notification by UUID
      description: Retrieves a notification by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
              example:
                uuid: 999e4444-e89b-12d3-a456-426614174888
                userUuid: 555e4444-e89b-12d3-a456-426614174888
                title: "Library Book Due"
                message: "Your borrowed book is due tomorrow."
                read: false
                createdAt: 1750003333
                readAt: null
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    patch:
      tags: [notifications]
      summary: Mark notification as read/unread
      description: Sets the `read` flag for a notification.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/NotificationReadUpdate' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Notification' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{userUuid}/notifications:
    get:
      tags: [notifications]
      summary: List notifications by user
      description: Returns all notifications (read and unread) for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{userUuid}/notifications/unread:
    get:
      tags: [notifications]
      summary: List unread notifications by user
      description: Returns only unread notifications for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{userUuid}/notifications/unread/count:
    get:
      tags: [notifications]
      summary: Get unread count by user
      description: Returns the unread notifications count for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { count: { type: integer, minimum: 0 } }
                required: [count]
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
