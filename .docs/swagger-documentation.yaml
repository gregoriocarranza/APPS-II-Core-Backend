openapi: 3.1.0
info:
  title: CampusConnect Core API
  version: "1.2.0"
  description: |
    The CampusConnect **Core API** exposes academic and institutional resources used by all modules
    (Student/Teacher Portal, Library, Cafeteria, Store, Analytics).

    ### Integration map
    - Student Portal → subjects, courses, enrollments, subject-prerequisites, notifications
    - Teacher Portal → courses, teacher-subjects, availabilities
    - Library / Cafeteria / Store → users, wallets, transactions, notifications
    - Analytics → subjects, courses, users, transactions

servers:
  - url: http://137.184.231.145:3030/api/v1
    description: Production (HTTPS)
security:
  - bearerAuth: []
tags:
  - name: subjects
    description: Academic subjects offered by the institution. A subject can have prerequisites and multiple courses.
  - name: courses
    description: Concrete course instances linked to a subject and delimited by a date range.
  - name: teacher-subjects
    description: Assignments that link a teacher to a subject they can teach.
  - name: enrollments
    description: Users enrolled in courses (students and teaching roles). Used by Student/Teacher Portals.
  - name: subject-prerequisites
    description: Prerequisite graph among subjects used for enrollment validation.
  - name: users
    description: Users of the platform (students, teachers, staff). Read-only in Core.
  - name: wallets
    description: User wallets for campus services (library fines, cafeteria/store purchases).
  - name: transactions
    description: Wallet transactions (topups, payments, refunds, transfers, payouts).
  - name: notifications
    description: User-targeted notifications; supports read/unread operations and listing by user.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      description: 1-based page index.
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      name: pageSize
      in: query
      description: Page size (max 100).
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
    SortParam:
      name: sort
      in: query
      description: Comma-separated fields. Prefix with `-` for descending (e.g., `name,-createdAt`).
      schema: { type: string }
    QParam:
      name: q
      in: query
      description: Free-text search (implementation-specific).
      schema: { type: string }
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string, description: Stable internal error code }
            message: { type: string, description: Human-readable message }
            details: { type: object, additionalProperties: true, description: Structured validation context }
            requestId: { type: string, format: uuid, description: Correlates server logs }
          required: [code, message]
      required: [error]
    PagedResponse:
      type: object
      properties:
        items: { type: array, items: { type: object } }
        total: { type: integer }
        page: { type: integer }
        pageSize: { type: integer }
      required: [items, total, page, pageSize]
    Subject:
      type: object
      description: Canonical subject record.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string, minLength: 1, description: Unique subject name }
      required: [uuid, name]
    Course:
      type: object
      description: A schedulable course offering linked to a subject.
      properties:
        uuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid, description: References `Subject.uuid` }
        exam: { type: string, nullable: true, description: Optional exam label }
        maxCount: { type: integer, minimum: 1, default: 35 }
        minCount: { type: integer, minimum: 1, default: 10 }
        since: { type: integer, description: Start time (Unix seconds) }
        until: { type: integer, description: End time (Unix seconds) }
        createdAt: { type: integer, description: Creation time (Unix seconds) }
      required: [uuid, subjectUuid, since, until]
    TeacherSubject:
      type: object
      description: N:N relation binding a teacher to a subject.
      properties:
        uuid: { type: string, format: uuid }
        teacherUuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid }
      required: [uuid, teacherUuid, subjectUuid]
    Enrollment:
      type: object
      description: Enrollment of a user into a course; supports student and teaching roles.
      properties:
        uuid: { type: string, format: uuid }
        courseUuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        status: { type: string, description: E.g., pending, confirmed, cancelled }
        role: { type: string, description: E.g., student, head, assistant }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, courseUuid, userUuid]
    EnrollmentCreate:
      type: object
      description: Payload to create an enrollment.
      properties:
        courseUuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        status: { type: string }
        role: { type: string }
      required: [courseUuid, userUuid]
    SubjectPrerequisite:
      type: object
      description: Directed prerequisite edge in the subject graph.
      properties:
        uuid: { type: string, format: uuid }
        subjectUuid: { type: string, format: uuid, description: Subject that requires the prerequisite }
        prerequisiteSubjectUuid: { type: string, format: uuid, description: Required subject }
      required: [uuid, subjectUuid, prerequisiteSubjectUuid]
    SubjectPrerequisiteCreate:
      type: object
      description: Payload to create a new prerequisite relation.
      properties:
        subjectUuid: { type: string, format: uuid }
        prerequisiteSubjectUuid: { type: string, format: uuid }
      required: [subjectUuid, prerequisiteSubjectUuid]
    User:
      type: object
      description: Read-only user projection.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, email]
    Wallet:
      type: object
      description: Wallet assigned to a user.
      properties:
        uuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        currency: { type: string, minLength: 3, maxLength: 3, description: ISO-4217 code }
        status: { type: string, enum: [active, blocked, closed] }
        createdAt: { type: integer, description: Unix seconds }
      required: [uuid, userUuid, currency, status]
    Transaction:
      type: object
      description: Monetary operation affecting a wallet's balance.
      properties:
        uuid: { type: string, format: uuid }
        walletUuid: { type: string, format: uuid }
        type: { type: string, enum: [topup, payment, transfer, refund, payout] }
        status: { type: string, enum: [pending, posted, failed, reversed] }
        amount: { type: integer, description: Amount in minor units }
        currency: { type: string, minLength: 3, maxLength: 3, description: ISO-4217 }
        description: { type: string }
        createdAt: { type: integer, description: Unix seconds }
        postedAt: { type: integer, nullable: true, description: Unix seconds }
      required: [uuid, walletUuid, type, status, amount, currency]
    Notification:
      type: object
      description: User-targeted message stored server-side.
      properties:
        uuid: { type: string, format: uuid }
        userUuid: { type: string, format: uuid }
        title: { type: string }
        message: { type: string }
        read: { type: boolean }
        createdAt: { type: integer, description: Unix seconds }
        readAt: { type: integer, nullable: true, description: Unix seconds }
      required: [uuid, userUuid, title, message, read]
    NotificationReadUpdate:
      type: object
      description: Partial update to toggle read status.
      properties:
        read: { type: boolean }
      required: [read]
  responses:
    BadRequest: { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Unauthorized: { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Forbidden: { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    NotFound: { description: Not Found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Conflict: { description: Conflict, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    UnprocessableEntity: { description: Unprocessable Entity, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    TooManyRequests: { description: Too Many Requests, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    InternalServerError: { description: Internal Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    ServiceUnavailable: { description: Service Unavailable, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
paths:
  /subjects:
    get:
      tags: [subjects]
      summary: List subjects
      description: |
        Returns a paged list of subjects. Supports optional text search and exact name filter.
        Typical consumers: Student/Teacher Portals and Analytics.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QParam'
        - name: name
          in: query
          schema: { type: string }
          description: Exact name filter.
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [subjects]
      summary: Create subject
      description: Creates a new subject. The `name` must be unique.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Subject' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /subjects/{uuid}:
    get:
      tags: [subjects]
      summary: Get subject
      description: Retrieves a subject by UUID.
      parameters:
        - name: uuid
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [subjects]
      summary: Replace subject
      description: Replaces a subject entirely. Use when updating all fields.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Subject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [subjects]
      summary: Delete subject
      description: Deletes the subject by UUID. Fails with `409` if in use by courses.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /courses:
    get:
      tags: [courses]
      summary: List courses
      description: |
        Returns a paged list of courses. Filter by `subjectUuid`, `exam`, and date range.
        Typical consumers: Student Portal, Teacher Portal, and Scheduling.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QParam'
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid } }
        - { name: exam, in: query, schema: { type: string } }
        - { name: sinceGte, in: query, schema: { type: integer }, description: since >= (Unix seconds) }
        - { name: untilLte, in: query, schema: { type: integer }, description: until <= (Unix seconds) }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [courses]
      summary: Create course
      description: Creates a new course linked to a subject.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /courses/{uuid}:
    get:
      tags: [courses]
      summary: Get course
      description: Retrieves a course by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [courses]
      summary: Replace course
      description: Replaces an existing course. Use when updating all fields.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Course' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [courses]
      summary: Delete course
      description: Deletes a course by UUID. Enrollment constraints may cause `409`.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /teacher-subjects:
    get:
      tags: [teacher-subjects]
      summary: List teacher-subject assignments
      description: Returns assignments linking teachers and subjects.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - { name: teacherUuid, in: query, schema: { type: string, format: uuid } }
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [teacher-subjects]
      summary: Create teacher-subject assignment
      description: Creates a new assignment for a teacher and a subject.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /teacher-subjects/{uuid}:
    get:
      tags: [teacher-subjects]
      summary: Get teacher-subject assignment
      description: Retrieves a teacher-subject assignment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    put:
      tags: [teacher-subjects]
      summary: Replace teacher-subject assignment
      description: Replaces an existing assignment.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/TeacherSubject' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [teacher-subjects]
      summary: Delete teacher-subject assignment
      description: Deletes an assignment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /enrollments:
    get:
      tags: [enrollments]
      summary: List enrollments
      description: Filter by `courseUuid` or `userUuid`.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: courseUuid, in: query, schema: { type: string, format: uuid } }
        - { name: userUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [enrollments]
      summary: Create enrollment
      description: Creates a new enrollment for a user and course.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/EnrollmentCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Enrollment' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /enrollments/{uuid}:
    delete:
      tags: [enrollments]
      summary: Delete enrollment
      description: Cancels an enrollment by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /subject-prerequisites:
    get:
      tags: [subject-prerequisites]
      summary: List subject prerequisites
      description: Filter by `subjectUuid` (prerequisites of a subject) or `prerequisiteSubjectUuid` (subjects that require another).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: subjectUuid, in: query, schema: { type: string, format: uuid } }
        - { name: prerequisiteSubjectUuid, in: query, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    post:
      tags: [subject-prerequisites]
      summary: Create subject prerequisite
      description: Creates a prerequisite relation between two subjects.
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SubjectPrerequisiteCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/SubjectPrerequisite' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /subject-prerequisites/{uuid}:
    delete:
      tags: [subject-prerequisites]
      summary: Delete subject prerequisite
      description: Deletes a prerequisite relation by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users:
    get:
      tags: [users]
      summary: List users
      description: Filter by `name` and/or `email` (exact or partial per implementation).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: name, in: query, schema: { type: string } }
        - { name: email, in: query, schema: { type: string, format: email } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /users/{uuid}:
    get:
      tags: [users]
      summary: Get user by UUID
      description: Retrieves a user by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /users/{userUuid}/wallets:
    get:
      tags: [wallets]
      summary: Get wallet(s) by user
      description: Returns one or more wallets owned by the given user. Provide `currency` to narrow down if multiple.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - { name: currency, in: query, schema: { type: string, minLength: 3, maxLength: 3 } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - { $ref: '#/components/schemas/Wallet' }
                  - { type: array, items: { $ref: '#/components/schemas/Wallet' } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /transactions:
    get:
      tags: [transactions]
      summary: List transactions
      description: Filter by `walletUuid` and creation/posting time ranges (Unix seconds).
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: walletUuid, in: query, schema: { type: string, format: uuid } }
        - { name: createdFrom, in: query, schema: { type: integer } }
        - { name: createdTo, in: query, schema: { type: integer } }
        - { name: postedFrom, in: query, schema: { type: integer } }
        - { name: postedTo, in: query, schema: { type: integer } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /transactions/{uuid}:
    get:
      tags: [transactions]
      summary: Get transaction by UUID
      description: Retrieves a wallet transaction by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Transaction' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /wallets/{walletUuid}/transactions:
    get:
      tags: [transactions]
      summary: List transactions by wallet
      description: Equivalent to `GET /transactions?walletUuid=...`.
      parameters:
        - { name: walletUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - { name: createdFrom, in: query, schema: { type: integer } }
        - { name: createdTo, in: query, schema: { type: integer } }
        - { name: postedFrom, in: query, schema: { type: integer } }
        - { name: postedTo, in: query, schema: { type: integer } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /notifications/{uuid}:
    get:
      tags: [notifications]
      summary: Get notification by UUID
      description: Retrieves a notification by UUID.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Notification' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    patch:
      tags: [notifications]
      summary: Mark notification as read/unread
      description: Sets the `read` flag for a notification.
      parameters:
        - { name: uuid, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/NotificationReadUpdate' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Notification' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /users/{userUuid}/notifications:
    get:
      tags: [notifications]
      summary: List notifications by user
      description: Returns all notifications (read and unread) for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /users/{userUuid}/notifications/unread:
    get:
      tags: [notifications]
      summary: List unread notifications by user
      description: Returns only unread notifications for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /users/{userUuid}/notifications/unread/count:
    get:
      tags: [notifications]
      summary: Get unread count by user
      description: Returns the unread notifications count for the user.
      parameters:
        - { name: userUuid, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { count: { type: integer, minimum: 0 } }
                required: [count]
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
