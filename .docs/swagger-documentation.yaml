openapi: 3.1.0
info:
  title: Core API
  version: "0.1.2"
  description: >
    OpenAPI specification draft for the Applications Development II project.
    Resources: courses, subjects, teacher-subjects, enrollments, prerequisites, wallets, users, transactions and notifications.
    Endpoints: GET/POST/GET {id}/PUT/DELETE for each resource.
servers:
  - url: http://137.184.231.145:3030
    description: Local
tags:
  - name: Auth
  - name: Courses
  - name: Subjects
  - name: Teacher-Subjects
  - name: Enrollments
  - name: Prerequisites
  - name: Wallets
  - name: Users
  - name: Transactions
  - name: Notifications
components:
  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page (1-based)
    PageSizeParam:
      name: page_size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: Page size (max 100)
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object, additionalProperties: true }
            request_id: { type: string, format: uuid }
          required: [code, message]
      required: [error]
    PagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total: { type: integer }
        page: { type: integer }
        page_size: { type: integer }
      required: [items, total, page, page_size]
    Course:
      type: object
      properties:
        id: { type: string, format: uuid }
        subject_id: { type: string, format: uuid, description: "FK Subject.id" }
        start_date: { type: string, format: date }
        end_date: { type: string, format: date }
        exam_type:
          type: string
          enum: [partial, makeup, final]
        max_capacity: { type: integer, minimum: 1 }
      required: [id, subject_id, start_date, end_date, exam_type, max_capacity]
    Subject:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, minLength: 1 }
      required: [id, name]
    TeacherSubject:
      type: object
      description: N:N relationship between teachers and subjects.
      properties:
        id: { type: string, format: uuid }
        teacher_id:
          {
            type: string,
            format: uuid,
            description: "FK Teacher.id (not defined in this draft)",
          }
        subject_id: { type: string, format: uuid, description: "FK Subject.id" }
      required: [id, teacher_id, subject_id]
    Enrollment:
      type: object
      description: Student enrollment record for a course.
      properties:
        uuid: { type: string, format: uuid }
        course_uuid:
          { type: string, format: uuid, description: "FK course.uuid" }
        student_uuid:
          { type: string, format: uuid, description: "FK users.uuid" }
        status:
          type: string
          description: "Enrollment status (e.g.: pending, confirmed, cancelled)"
        role:
          type: string
          description: "Role in the course (e.g.: student, titular, adjunct, assistant)"
        created_at: { type: string, format: date-time }
      required: [uuid, course_uuid, student_uuid]
    EnrollmentCreate:
      type: object
      description: Payload to create an enrollment.
      properties:
        course_uuid: { type: string, format: uuid }
        student_uuid: { type: string, format: uuid }
        status:
          type: string
          description: "Initial status (e.g.: pending)"
        role:
          type: string
          description: "Role (default 'student' if applicable)"
      required: [course_uuid, student_uuid]
    Prerequisite:
      type: object
      description: Prerequisite relationship between subjects.
      properties:
        uuid: { type: string, format: uuid }
        subject_uuid:
          {
            type: string,
            format: uuid,
            description: "Subject that requires the prerequisite",
          }
        prerequisite_subject_uuid:
          {
            type: string,
            format: uuid,
            description: "Required subject (prerequisite)",
          }
      required: [uuid, subject_uuid, prerequisite_subject_uuid]
    PrerequisiteCreate:
      type: object
      description: Payload to create a prerequisite between two subjects.
      properties:
        subject_uuid: { type: string, format: uuid }
        prerequisite_subject_uuid: { type: string, format: uuid }
      required: [subject_uuid, prerequisite_subject_uuid]
    Wallet:
      type: object
      description: User wallet.
      properties:
        uuid: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        currency:
          type: string
          description: ISO 4217 code (3 letters)
          minLength: 3
          maxLength: 3
          example: "ARS"
        status:
          type: string
          enum: [active, blocked, closed]
        created_at: { type: string, format: date-time }
      required: [uuid, user_id, currency, status]
    User:
      type: object
      description: System user.
      properties:
        uuid: { type: string, format: uuid }
        name: { type: string }
        email:
          type: string
          format: email
        created_at: { type: string, format: date-time }
      required: [uuid, email]
    Transaction:
      type: object
      description: Movement associated with a wallet.
      properties:
        uuid: { type: string, format: uuid }
        to_wallet_uuid:
          type: string
          format: uuid
          nullable: true
          description: "Destination wallet"
        from_wallet_uuid:
          type: string
          format: uuid
          nullable: true
          description: "Source wallet"
        type:
          type: string
          enum: [topup, payment, transfer, refund, payout]
          description: Transaction type. `topup` adding funds; `payment` spending funds; `transfer` moving funds between wallets; `refund` returning funds to wallet; `payout` withdrawing funds from wallet.
        status:
          type: string
          enum: [pending, posted, failed, reversed]
        amount:
          type: integer
          description: Amount in the smallest currency unit (e.g. cents)
          example: 12500
        currency:
          type: string
          description: ISO 4217 code (3 letters)
          minLength: 3
          maxLength: 3
          example: "ARS"
        description: { type: string }
        created_at: { type: string, format: date-time }
        posted_at: { type: string, format: date-time, nullable: true }
      required: [uuid, type, status, amount, currency]
    Notification:
      type: object
      description: Notification directed to a user.
      properties:
        uuid: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        title: { type: string }
        message: { type: string }
        read:
          type: boolean
          description: Read indicator
        created_at: { type: string, format: date-time }
        read_at: { type: string, format: date-time, nullable: true }
      required: [uuid, user_id, title, message, read]
    NotificationReadUpdate:
      type: object
      description: Notification read status update.
      properties:
        read: { type: boolean }
      required: [read]
    LoginRequest:
      type: object
      description: Login credentials payload.
      properties:
        user: { type: string, description: "Username or email" }
        password:
          { type: string, format: password, description: "User password" }
      required: [user, password]
    AuthResponse:
      type: object
      description: Authentication response with tokens.
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            access_token: { type: string, description: "JWT access token" }
            refresh_token: { type: string, description: "JWT refresh token" }
            token_type: { type: string, default: "Bearer" }
            expires_in:
              { type: integer, description: "Token expiration time in seconds" }
            user:
              type: object
              properties:
                uuid: { type: string, format: uuid }
                name: { type: string }
                email: { type: string, format: email }
          required: [access_token, refresh_token, token_type, expires_in, user]
      required: [success, data]
    RefreshRequest:
      type: object
      description: Token refresh request payload.
      properties:
        refresh_token: { type: string, description: "Valid refresh token" }
      required: [refresh_token]
    LogoutRequest:
      type: object
      description: Logout request payload.
      properties:
        refresh_token:
          { type: string, description: "Refresh token to invalidate" }
      required: [refresh_token]
    AuthError:
      type: object
      description: Authentication error response.
      properties:
        success: { type: boolean, default: false }
        message: { type: string, description: "Error message" }
      required: [success, message]
paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      description: Authenticate user with username/email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              user: "john.doe@example.com"
              password: "securePassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                data:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  token_type: "Bearer"
                  expires_in: 3600
                  user:
                    uuid: "u_123"
                    name: "John Doe"
                    email: "john.doe@example.com"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
              example:
                success: false
                message: "Invalid username or password"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      description: Get a new access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
            example:
              refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                success: true
                data:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  token_type: "Bearer"
                  expires_in: 3600
                  user:
                    uuid: "u_123"
                    name: "John Doe"
                    email: "john.doe@example.com"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
              example:
                success: false
                message: "Invalid or expired refresh token"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      tags: [Auth]
      summary: User logout
      description: Invalidate refresh token and log out user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequest"
            example:
              refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                required: [success, message]
              example:
                success: true
                message: "Logout successful"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
              example:
                success: false
                message: "Invalid refresh token"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /courses:
    get:
      tags: [Courses]
      summary: List courses
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: subject_id
          in: query
          schema: { type: string }
          description: Filter by Subject
        - name: exam_type
          in: query
          schema:
            type: string
            enum: [partial, makeup, final]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - id: "c_123"
                    subject_id: "m_10"
                    start_date: "2025-03-01"
                    end_date: "2025-07-01"
                    exam_type: "partial"
                    max_capacity: 30
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Courses]
      summary: Create course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
            example:
              id: "c_123"
              subject_id: "m_10"
              start_date: "2025-03-01"
              end_date: "2025-07-01"
              exam_type: "partial"
              max_capacity: 30
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Course" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /courses/{id}:
    get:
      tags: [Courses]
      summary: Get course
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Course" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    put:
      tags: [Courses]
      summary: Replace course
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Course" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Course" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      tags: [Courses]
      summary: Delete course
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Deleted
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /subjects:
    get:
      tags: [Subjects]
      summary: List subjects
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: name
          in: query
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - id: "m_10"
                    name: "Software Engineering"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Subjects]
      summary: Create subject
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Subject" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }
  /subjects/{id}:
    get:
      tags: [Subjects]
      summary: Get subject
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    put:
      tags: [Subjects]
      summary: Replace subject
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Subject" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subject" }
    delete:
      tags: [Subjects]
      summary: Delete subject
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Deleted
  /teacher-subjects:
    get:
      tags: [Teacher-Subjects]
      summary: List teacher-subject assignments
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: teacher_id
          in: query
          schema: { type: string }
        - name: subject_id
          in: query
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - id: "dm_1"
                    teacher_id: "d_5"
                    subject_id: "m_10"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Teacher-Subjects]
      summary: Create teacher-subject assignment
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TeacherSubject" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TeacherSubject" }
  /teacher-subjects/{id}:
    get:
      tags: [Teacher-Subjects]
      summary: Get teacher-subject assignment
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TeacherSubject" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    put:
      tags: [Teacher-Subjects]
      summary: Replace teacher-subject assignment
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TeacherSubject" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TeacherSubject" }
    delete:
      tags: [Teacher-Subjects]
      summary: Delete teacher-subject assignment
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Deleted
  /enrollments:
    get:
      tags: [Enrollments]
      summary: List enrollments
      description: Allows filtering by course or by user.
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: course_uuid
          in: query
          schema: { type: string, format: uuid }
          description: Filter enrollments by course
        - name: student_uuid
          in: query
          schema: { type: string, format: uuid }
          description: Filter enrollments by user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "i_1"
                    course_uuid: "c_123"
                    student_uuid: "u_555"
                    status: "pending"
                    role: "student"
                    created_at: "2025-03-01T10:00:00Z"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Enrollments]
      summary: Create enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EnrollmentCreate" }
            example:
              course_uuid: "c_123"
              student_uuid: "u_555"
              status: "pending"
              role: "student"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Enrollment" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /enrollments/{id}:
    delete:
      tags: [Enrollments]
      summary: Delete enrollment
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "204":
          description: Deleted
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /prerequisites:
    get:
      tags: [Prerequisites]
      summary: List prerequisites
      description: |
        - To get prerequisites of a subject use `subject_uuid`.
        - To get what subjects another one is prerequisite for, use `prerequisite_subject_uuid`.
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: subject_uuid
          in: query
          schema: { type: string, format: uuid }
          description: Subject that requires the prerequisite
        - name: prerequisite_subject_uuid
          in: query
          schema: { type: string, format: uuid }
          description: Subject that is required as prerequisite
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "corr_1"
                    subject_uuid: "m_10"
                    prerequisite_subject_uuid: "m_2"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Prerequisites]
      summary: Create prerequisite
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PrerequisiteCreate" }
            example:
              subject_uuid: "m_10"
              prerequisite_subject_uuid: "m_2"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Prerequisite" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /prerequisites/{id}:
    delete:
      tags: [Prerequisites]
      summary: Delete prerequisite
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "204":
          description: Deleted
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /wallets/by-user/{user_id}:
    get:
      tags: [Wallets]
      summary: Get wallet by user
      description: |
        Returns a single wallet associated with the `user_id`.
        If the user has more than one wallet, specify `currency` to disambiguate.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: currency
          in: query
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 3
          description: Currency code (ISO 4217), e.g. ARS, USD.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Wallet" }
        "400":
          description: Invalid parameters or ambiguous result (multiple wallets without `currency`).
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Wallet not found for user/currency.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /users:
    get:
      tags: [Users]
      summary: List users
      description: Filter by name or email. Exact or partial match according to implementation.
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: name
          in: query
          required: false
          schema: { type: string }
          description: Filter by name
        - name: email
          in: query
          required: false
          schema: { type: string, format: email }
          description: Filter by email
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "u_1"
                    name: "Ada Lovelace"
                    email: "ada@example.com"
                total: 1
                page: 1
                page_size: 25
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by UUID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /transactions:
    get:
      tags: [Transactions]
      summary: List transactions
      description: |
        Allows filtering by `wallet_uuid` and by date ranges.
        If you only send `created_from` or `posted_from`, it acts as "date greater than or equal to".
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: from_wallet_uuid
          in: query
          required: false
          schema: { type: string, format: uuid }
          description: Filter by source wallet (from_wallet_uuid)
        - name: to_wallet_uuid
          in: query
          required: false
          schema: { type: string, format: uuid }
          description: Filter by destination wallet (to_wallet_uuid)
        - name: created_from
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: From (inclusive) by creation date
        - name: created_to
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: To (inclusive) by creation date
        - name: posted_from
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: From (inclusive) by posting date
        - name: posted_to
          in: query
          required: false
          schema: { type: string, format: date-time }
          description: To (inclusive) by posting date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "t_1"
                    to_wallet_uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    from_wallet_uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    type: "topup"
                    status: "posted"
                    amount: 12500
                    currency: "ARS"
                    description: "Recarga de saldo"
                    created_at: "2025-03-01T10:00:00Z"
                    posted_at: "2025-03-01T10:05:00Z"
                total: 1
                page: 1
                page_size: 25
    post:
      tags: [Transactions]
      summary: Create transaction
      description: Creates an accounting movement in Core that debits/credits the user wallet and the corresponding institutional wallet(s) (store, cafeteria, library, etc. Returns the created transaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
            example:
              to_wallet_uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              from_wallet_uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              type: "topup"
              amount: 12500
              currency: "ARS"
              description: "Recarga de saldo"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Transaction" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction by UUID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Transaction" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /wallets/{wallet_uuid}/transactions:
    get:
      tags: [Transactions]
      summary: List transactions by wallet
      description: Nested endpoint equivalent to using `GET /transactions?wallet_uuid=...`.
      parameters:
        - name: wallet_uuid
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: created_from
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: created_to
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: posted_from
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: posted_to
          in: query
          required: false
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
  /notifications/{id}:
    patch:
      tags: [Notifications]
      summary: Mark notification as read/unread
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NotificationReadUpdate" }
            example:
              read: true
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Notification" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "404":
          description: Not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /users/{user_id}/notifications:
    get:
      tags: [Notifications]
      summary: List notifications by user
      description: Returns all notifications (read and unread) from a user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "n_1"
                    user_id: "u_1"
                    title: "Recordatorio"
                    message: "Tienes una inscripción pendiente"
                    read: false
                    created_at: "2025-03-01T10:00:00Z"
                  - uuid: "n_2"
                    user_id: "u_1"
                    title: "Aviso"
                    message: "Inscripción confirmada"
                    read: true
                    created_at: "2025-03-02T09:00:00Z"
                total: 2
                page: 1
                page_size: 25
  /users/{user_id}/notifications/unread:
    get:
      tags: [Notifications]
      summary: List unread notifications by user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PagedResponse" }
              example:
                items:
                  - uuid: "n_1"
                    user_id: "u_1"
                    title: "Recordatorio"
                    message: "Tienes una inscripción pendiente"
                    read: false
                    created_at: "2025-03-01T10:00:00Z"
                total: 1
                page: 1
                page_size: 25
  /users/{user_id}/notifications/unread/count:
    get:
      tags: [Notifications]
      summary: Get unread count by user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer, minimum: 0 }
                required: [count]
